const { expectEvent, expectRevert, constants } = require('@openzeppelin/test-helpers');
const { web3 } = require('@openzeppelin/test-helpers/src/setup.js');
const { isPinataAuthenticated, generateTokenURI } = require('../scripts/pinata.js')
const chai = require('chai')
const BN = require('bn.js')

// Enable and inject BN dependency
chai.use(require('chai-bn')(BN));

const Star = artifacts.require("Star")

contract('Star', (accounts) => {
    let owner = accounts[0]
    let star

    before(async () => {
        star = await Star.deployed()
    })

    it('Is Pinata authenticated', async () => {
        expect(await isPinataAuthenticated(), 'Cannot connect to Pinata. Make sure you updated your .env file appropriately.').to.be.true
    })

    it('Owner mints new star', async () => {
        const balance = web3.utils.toBN('1')
        const tokenURI = await generateTokenURI('My awesome star!')
        const starGazer = owner
        const instance = await Star.deployed()
        const tokenId = await instance.nextTokenId();

        const receipt = await instance.mintNFT(starGazer, tokenURI)

        expectEvent(receipt, 'Transfer', { from: constants.ZERO_ADDRESS, to: starGazer, tokenId })
        chai.expect(await instance.balanceOf.call(starGazer)).to.be.a.bignumber.that.gte(balance)
        expect(await instance.ownerOf.call(tokenId)).to.equal(starGazer)
        expect(await instance.tokenURI.call(tokenId)).to.equal(tokenURI)
    })

    it('Nobody else can mint new star', async () => {
        const balance = web3.utils.toBN('1')
        const tokenURI = await generateTokenURI('My dwindling star!')
        const starGazer = accounts[1]
        const instance = await Star.deployed()
        const tokenId = await instance.nextTokenId();

        const receipt = await instance.mintNFT(starGazer, tokenURI)

        expectRevert(receipt, 'Nobody but the contract owner should be able to mint new stars')
    })
})